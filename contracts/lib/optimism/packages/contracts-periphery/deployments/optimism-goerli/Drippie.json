{
  "address": "0x8D8d533C16D23847EB04EEB0925be8900Dd3af86",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "nameref",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "interval",
              "type": "uint256"
            },
            {
              "internalType": "contract IDripCheck",
              "name": "dripcheck",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "checkparams",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Drippie.DripAction[]",
              "name": "actions",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Drippie.DripConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "DripCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "nameref",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DripExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "nameref",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum Drippie.DripStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "DripStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrewERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "WithdrewERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrewETH",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "CALL",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "DELEGATECALL",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "interval",
              "type": "uint256"
            },
            {
              "internalType": "contract IDripCheck",
              "name": "dripcheck",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "checkparams",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Drippie.DripAction[]",
              "name": "actions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Drippie.DripConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "drip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "drips",
      "outputs": [
        {
          "internalType": "enum Drippie.DripStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "interval",
              "type": "uint256"
            },
            {
              "internalType": "contract IDripCheck",
              "name": "dripcheck",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "checkparams",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Drippie.DripAction[]",
              "name": "actions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Drippie.DripConfig",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "last",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "executable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "enum Drippie.DripStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "status",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC721",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xce71abe3a40dce0243fa31e639995deba791fa6d05de5a0ae33ef3d3b8752764",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xc37f6a6c4AB335E20d10F034B90386E2fb70bbF5",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2132643",
    "logsBloom": "0x
    "blockHash": "0xc752d29e4717f908630803175a62ede18360241f05892f83e2c570e5b6c2fbb2",
    "transactionHash": "0xce71abe3a40dce0243fa31e639995deba791fa6d05de5a0ae33ef3d3b8752764",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 379101,
        "transactionHash": "0xce71abe3a40dce0243fa31e639995deba791fa6d05de5a0ae33ef3d3b8752764",
        "address": "0x8D8d533C16D23847EB04EEB0925be8900Dd3af86",
        "topics": [
          "0x8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c6373de60c2d3297b18a8f964618ac46e011b58"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc752d29e4717f908630803175a62ede18360241f05892f83e2c570e5b6c2fbb2"
      }
    ],
    "blockNumber": 379101,
    "cumulativeGasUsed": "2132643",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9C6373dE60c2D3297b18A8f964618ac46E011B58"
  ],
  "numDeployments": 1,
  "solcInputHash": "cb12280dddcf446d7c90129cbaba29bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"nameref\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"contract IDripCheck\",\"name\":\"dripcheck\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkparams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Drippie.DripAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Drippie.DripConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"DripCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"nameref\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DripExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"nameref\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum Drippie.DripStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"DripStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WithdrewERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewETH\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CALL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"DELEGATECALL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"contract IDripCheck\",\"name\":\"dripcheck\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkparams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Drippie.DripAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Drippie.DripConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"drip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"drips\",\"outputs\":[{\"internalType\":\"enum Drippie.DripStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"contract IDripCheck\",\"name\":\"dripcheck\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkparams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Drippie.DripAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Drippie.DripConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"executable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"enum Drippie.DripStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"status\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"DripCreated(string,string,(uint256,address,bytes,(address,bytes,uint256)[]))\":{\"params\":{\"config\":\"Config for the created drip.\",\"name\":\"Unindexed name parameter (unhashed).\",\"nameref\":\"Indexed name parameter (hashed).\"}},\"DripExecuted(string,string,address,uint256)\":{\"params\":{\"executor\":\"Address that executed the drip.\",\"name\":\"Unindexed name parameter (unhashed).\",\"nameref\":\"Indexed name parameter (hashed).\",\"timestamp\":\"Time when the drip was executed.\"}},\"DripStatusUpdated(string,string,uint8)\":{\"params\":{\"name\":\"Unindexed name parameter (unhashed).\",\"nameref\":\"Indexed name parameter (hashed).\",\"status\":\"New drip status.\"}}},\"kind\":\"dev\",\"methods\":{\"CALL(address,bytes,uint256,uint256)\":{\"params\":{\"_data\":\"Data to send with the call.\",\"_gas\":\"Amount of gas to send with the call.\",\"_target\":\"Address to call.\",\"_value\":\"ETH value to send with the call.\"},\"returns\":{\"_0\":\"Boolean success value.\",\"_1\":\"Bytes data returned by the call.\"}},\"DELEGATECALL(address,bytes,uint256)\":{\"params\":{\"_data\":\"Data to send with the call.\",\"_gas\":\"Amount of gas to send with the call.\",\"_target\":\"Address to call.\"},\"returns\":{\"_0\":\"Boolean success value.\",\"_1\":\"Bytes data returned by the call.\"}},\"constructor\":{\"params\":{\"_owner\":\"Initial contract owner.\"}},\"create(string,(uint256,address,bytes,(address,bytes,uint256)[]))\":{\"params\":{\"_config\":\"Configuration for the drip.\",\"_name\":\"Name of the drip.\"}},\"drip(string)\":{\"params\":{\"_name\":\"Name of the drip to trigger.\"}},\"executable(string)\":{\"params\":{\"_name\":\"Drip to check.\"},\"returns\":{\"_0\":\"True if the drip is executable, false otherwise.\"}},\"status(string,uint8)\":{\"params\":{\"_name\":\"Name of the drip to update.\",\"_status\":\"New drip status.\"}},\"withdrawERC20(address,address)\":{\"params\":{\"_asset\":\"ERC20 token to withdraw.\",\"_to\":\"Address to receive the ERC20 balance.\"}},\"withdrawERC20(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of ERC20 to withdraw.\",\"_asset\":\"ERC20 token to withdraw.\",\"_to\":\"Address to receive the ERC20 balance.\"}},\"withdrawERC721(address,address,uint256)\":{\"params\":{\"_asset\":\"ERC721 token to withdraw.\",\"_id\":\"Token ID of the ERC721 token to withdraw.\",\"_to\":\"Address to receive the ERC721 token.\"}},\"withdrawETH(address)\":{\"params\":{\"_to\":\"Address to receive the ETH balance.\"}},\"withdrawETH(address,uint256)\":{\"params\":{\"_amount\":\"Amount of ETH to withdraw.\",\"_to\":\"Address to receive the ETH balance.\"}}},\"title\":\"Drippie\",\"version\":1},\"userdoc\":{\"events\":{\"DripCreated(string,string,(uint256,address,bytes,(address,bytes,uint256)[]))\":{\"notice\":\"Emitted when a new drip is created.\"},\"DripExecuted(string,string,address,uint256)\":{\"notice\":\"Emitted when a drip is executed.\"},\"DripStatusUpdated(string,string,uint8)\":{\"notice\":\"Emitted when a drip status is updated.\"},\"ReceivedETH(address,uint256)\":{\"notice\":\"Emitted when ETH is received by this address.\"},\"WithdrewERC20(address,address,address,uint256)\":{\"notice\":\"Emitted when ERC20 tokens are withdrawn from this address.\"},\"WithdrewERC721(address,address,address,uint256)\":{\"notice\":\"Emitted when ERC20 tokens are withdrawn from this address.\"},\"WithdrewETH(address,address,uint256)\":{\"notice\":\"Emitted when ETH is withdrawn from this address.\"}},\"kind\":\"user\",\"methods\":{\"CALL(address,bytes,uint256,uint256)\":{\"notice\":\"Sends a CALL to a target address.\"},\"DELEGATECALL(address,bytes,uint256)\":{\"notice\":\"Sends a DELEGATECALL to a target address.\"},\"create(string,(uint256,address,bytes,(address,bytes,uint256)[]))\":{\"notice\":\"Creates a new drip with the given name and configuration. Once created, drips cannot         be modified in any way (this is a security measure). If you want to update a drip,         simply pause (and potentially archive) the existing drip and create a new one.\"},\"drip(string)\":{\"notice\":\"Triggers a drip. This function is deliberately left as a public function because the         assumption being made here is that setting the drip to ACTIVE is an affirmative         signal that the drip should be executable according to the drip parameters, drip         check, and drip interval. Note that drip parameters are read entirely from the state         and are not supplied as user input, so there should not be any way for a         non-authorized user to influence the behavior of the drip.\"},\"drips(string)\":{\"notice\":\"Maps from drip names to drip states.\"},\"executable(string)\":{\"notice\":\"Checks if a given drip is executable.\"},\"status(string,uint8)\":{\"notice\":\"Sets the status for a given drip. The behavior of this function depends on the         status that the user is trying to set. A drip can always move between ACTIVE and         PAUSED, but it can never move back to NONE and once ARCHIVED, it can never move back         to ACTIVE or PAUSED.\"},\"withdrawERC20(address,address)\":{\"notice\":\"Withdraws full ERC20 balance to the recipient.\"},\"withdrawERC20(address,address,uint256)\":{\"notice\":\"Withdraws partial ERC20 balance to the recipient.\"},\"withdrawERC721(address,address,uint256)\":{\"notice\":\"Withdraws ERC721 token to the recipient.\"},\"withdrawETH(address)\":{\"notice\":\"Withdraws full ETH balance to the recipient.\"},\"withdrawETH(address,uint256)\":{\"notice\":\"Withdraws partial ETH balance to the recipient.\"}},\"notice\":\"Drippie is a system for managing automated contract interactions. A specific interaction         is called a \\\"drip\\\" and can be executed according to some condition (called a dripcheck)         and an execution interval. Drips cannot be executed faster than the execution interval.         Drips can trigger arbitrary contract calls where the calling contract is this contract         address. Drips can also send ETH value, which makes them ideal for keeping addresses         sufficiently funded with ETH. Drippie is designed to be connected with smart contract         automation services so that drips can be executed automatically. However, Drippie is         specifically designed to be separated from these services so that trust assumptions are         better compartmentalized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal/drippie/Drippie.sol\":\"Drippie\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setOwner(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7e91c80b0dd1a14a19cb9e661b99924043adab6d9d893bbfcf3a6a3dc23a6743\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xb59c7c25eca386f39da4819a9f70f89b73b7583d5f5127a83ffe5339800b1183\",\"license\":\"AGPL-3.0-only\"},\"contracts/universal/AssetReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { ERC721 } from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport { Transactor } from \\\"./Transactor.sol\\\";\\n\\n/**\\n * @title AssetReceiver\\n * @notice AssetReceiver is a minimal contract for receiving funds assets in the form of either\\n * ETH, ERC20 tokens, or ERC721 tokens. Only the contract owner may withdraw the assets.\\n */\\ncontract AssetReceiver is Transactor {\\n    /**\\n     * @notice Emitted when ETH is received by this address.\\n     *\\n     * @param from Address that sent ETH to this contract.\\n     */\\n    event ReceivedETH(address indexed from, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when ETH is withdrawn from this address.\\n     *\\n     * @param withdrawer Address that triggered the withdrawal.\\n     * @param recipient  Address that received the withdrawal.\\n     * @param amount     ETH amount withdrawn.\\n     */\\n    event WithdrewETH(address indexed withdrawer, address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when ERC20 tokens are withdrawn from this address.\\n     *\\n     * @param withdrawer Address that triggered the withdrawal.\\n     * @param recipient  Address that received the withdrawal.\\n     * @param asset      Address of the token being withdrawn.\\n     * @param amount     ERC20 amount withdrawn.\\n     */\\n    event WithdrewERC20(\\n        address indexed withdrawer,\\n        address indexed recipient,\\n        address indexed asset,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted when ERC20 tokens are withdrawn from this address.\\n     *\\n     * @param withdrawer Address that triggered the withdrawal.\\n     * @param recipient  Address that received the withdrawal.\\n     * @param asset      Address of the token being withdrawn.\\n     * @param id         Token ID being withdrawn.\\n     */\\n    event WithdrewERC721(\\n        address indexed withdrawer,\\n        address indexed recipient,\\n        address indexed asset,\\n        uint256 id\\n    );\\n\\n    /**\\n     * @param _owner Initial contract owner.\\n     */\\n    constructor(address _owner) Transactor(_owner) {}\\n\\n    /**\\n     * @notice Make sure we can receive ETH.\\n     */\\n    receive() external payable {\\n        emit ReceivedETH(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraws full ETH balance to the recipient.\\n     *\\n     * @param _to Address to receive the ETH balance.\\n     */\\n    function withdrawETH(address payable _to) external onlyOwner {\\n        withdrawETH(_to, address(this).balance);\\n    }\\n\\n    /**\\n     * @notice Withdraws partial ETH balance to the recipient.\\n     *\\n     * @param _to     Address to receive the ETH balance.\\n     * @param _amount Amount of ETH to withdraw.\\n     */\\n    function withdrawETH(address payable _to, uint256 _amount) public onlyOwner {\\n        // slither-disable-next-line reentrancy-unlimited-gas\\n        _to.transfer(_amount);\\n        emit WithdrewETH(msg.sender, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws full ERC20 balance to the recipient.\\n     *\\n     * @param _asset ERC20 token to withdraw.\\n     * @param _to    Address to receive the ERC20 balance.\\n     */\\n    function withdrawERC20(ERC20 _asset, address _to) external onlyOwner {\\n        withdrawERC20(_asset, _to, _asset.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Withdraws partial ERC20 balance to the recipient.\\n     *\\n     * @param _asset  ERC20 token to withdraw.\\n     * @param _to     Address to receive the ERC20 balance.\\n     * @param _amount Amount of ERC20 to withdraw.\\n     */\\n    function withdrawERC20(\\n        ERC20 _asset,\\n        address _to,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        // slither-disable-next-line unchecked-transfer\\n        _asset.transfer(_to, _amount);\\n        // slither-disable-next-line reentrancy-events\\n        emit WithdrewERC20(msg.sender, _to, address(_asset), _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws ERC721 token to the recipient.\\n     *\\n     * @param _asset ERC721 token to withdraw.\\n     * @param _to    Address to receive the ERC721 token.\\n     * @param _id    Token ID of the ERC721 token to withdraw.\\n     */\\n    function withdrawERC721(\\n        ERC721 _asset,\\n        address _to,\\n        uint256 _id\\n    ) external onlyOwner {\\n        _asset.transferFrom(address(this), _to, _id);\\n        // slither-disable-next-line reentrancy-events\\n        emit WithdrewERC721(msg.sender, _to, address(_asset), _id);\\n    }\\n}\\n\",\"keccak256\":\"0x3330abf055d317df2b99fdb0f51e1105d27d6f2a2819ebec5e0a1a1638203d21\",\"license\":\"MIT\"},\"contracts/universal/Transactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Owned } from \\\"@rari-capital/solmate/src/auth/Owned.sol\\\";\\n\\n/**\\n * @title Transactor\\n * @notice Transactor is a minimal contract that can send transactions.\\n */\\ncontract Transactor is Owned {\\n    /**\\n     * @param _owner Initial contract owner.\\n     */\\n    constructor(address _owner) Owned(_owner) {}\\n\\n    /**\\n     * Sends a CALL to a target address.\\n     *\\n     * @param _target Address to call.\\n     * @param _data   Data to send with the call.\\n     * @param _gas    Amount of gas to send with the call.\\n     * @param _value  ETH value to send with the call.\\n     *\\n     * @return Boolean success value.\\n     * @return Bytes data returned by the call.\\n     */\\n    function CALL(\\n        address _target,\\n        bytes memory _data,\\n        uint256 _gas,\\n        uint256 _value\\n    ) external payable onlyOwner returns (bool, bytes memory) {\\n        return _target.call{ gas: _gas, value: _value }(_data);\\n    }\\n\\n    /**\\n     * Sends a DELEGATECALL to a target address.\\n     *\\n     * @param _target Address to call.\\n     * @param _data   Data to send with the call.\\n     * @param _gas    Amount of gas to send with the call.\\n     *\\n     * @return Boolean success value.\\n     * @return Bytes data returned by the call.\\n     */\\n    function DELEGATECALL(\\n        address _target,\\n        bytes memory _data,\\n        uint256 _gas\\n    ) external payable onlyOwner returns (bool, bytes memory) {\\n        // slither-disable-next-line controlled-delegatecall\\n        return _target.delegatecall{ gas: _gas }(_data);\\n    }\\n}\\n\",\"keccak256\":\"0x6f11c33999f7f3183a9c69057040141170218a44ce0e589766a327e44c8f43f1\",\"license\":\"MIT\"},\"contracts/universal/drippie/Drippie.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { AssetReceiver } from \\\"../AssetReceiver.sol\\\";\\nimport { IDripCheck } from \\\"./IDripCheck.sol\\\";\\n\\n/**\\n * @title Drippie\\n * @notice Drippie is a system for managing automated contract interactions. A specific interaction\\n *         is called a \\\"drip\\\" and can be executed according to some condition (called a dripcheck)\\n *         and an execution interval. Drips cannot be executed faster than the execution interval.\\n *         Drips can trigger arbitrary contract calls where the calling contract is this contract\\n *         address. Drips can also send ETH value, which makes them ideal for keeping addresses\\n *         sufficiently funded with ETH. Drippie is designed to be connected with smart contract\\n *         automation services so that drips can be executed automatically. However, Drippie is\\n *         specifically designed to be separated from these services so that trust assumptions are\\n *         better compartmentalized.\\n */\\ncontract Drippie is AssetReceiver {\\n    /**\\n     * @notice Enum representing different status options for a given drip.\\n     *\\n     * @custom:value NONE     Drip does not exist.\\n     * @custom:value ACTIVE   Drip is active and can be executed.\\n     * @custom:value PAUSED   Drip is paused and cannot be executed until reactivated.\\n     * @custom:value ARCHIVED Drip is archived and can no longer be executed or reactivated.\\n     */\\n    enum DripStatus {\\n        NONE,\\n        ACTIVE,\\n        PAUSED,\\n        ARCHIVED\\n    }\\n\\n    /**\\n     * @notice Represents a drip action.\\n     */\\n    struct DripAction {\\n        address payable target;\\n        bytes data;\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @notice Represents the configuration for a given drip.\\n     */\\n    struct DripConfig {\\n        uint256 interval;\\n        IDripCheck dripcheck;\\n        bytes checkparams;\\n        DripAction[] actions;\\n    }\\n\\n    /**\\n     * @notice Represents the state of an active drip.\\n     */\\n    struct DripState {\\n        DripStatus status;\\n        DripConfig config;\\n        uint256 last;\\n        uint256 count;\\n    }\\n\\n    /**\\n     * @notice Emitted when a new drip is created.\\n     *\\n     * @param nameref Indexed name parameter (hashed).\\n     * @param name    Unindexed name parameter (unhashed).\\n     * @param config  Config for the created drip.\\n     */\\n    event DripCreated(\\n        // Emit name twice because indexed version is hashed.\\n        string indexed nameref,\\n        string name,\\n        DripConfig config\\n    );\\n\\n    /**\\n     * @notice Emitted when a drip status is updated.\\n     *\\n     * @param nameref Indexed name parameter (hashed).\\n     * @param name    Unindexed name parameter (unhashed).\\n     * @param status  New drip status.\\n     */\\n    event DripStatusUpdated(\\n        // Emit name twice because indexed version is hashed.\\n        string indexed nameref,\\n        string name,\\n        DripStatus status\\n    );\\n\\n    /**\\n     * @notice Emitted when a drip is executed.\\n     *\\n     * @param nameref   Indexed name parameter (hashed).\\n     * @param name      Unindexed name parameter (unhashed).\\n     * @param executor  Address that executed the drip.\\n     * @param timestamp Time when the drip was executed.\\n     */\\n    event DripExecuted(\\n        // Emit name twice because indexed version is hashed.\\n        string indexed nameref,\\n        string name,\\n        address executor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Maps from drip names to drip states.\\n     */\\n    mapping(string => DripState) public drips;\\n\\n    /**\\n     * @param _owner Initial contract owner.\\n     */\\n    constructor(address _owner) AssetReceiver(_owner) {}\\n\\n    /**\\n     * @notice Creates a new drip with the given name and configuration. Once created, drips cannot\\n     *         be modified in any way (this is a security measure). If you want to update a drip,\\n     *         simply pause (and potentially archive) the existing drip and create a new one.\\n     *\\n     * @param _name   Name of the drip.\\n     * @param _config Configuration for the drip.\\n     */\\n    function create(string memory _name, DripConfig memory _config) external onlyOwner {\\n        // Make sure this drip doesn't already exist. We *must* guarantee that no other function\\n        // will ever set the status of a drip back to NONE after it's been created. This is why\\n        // archival is a separate status.\\n        require(\\n            drips[_name].status == DripStatus.NONE,\\n            \\\"Drippie: drip with that name already exists\\\"\\n        );\\n\\n        // We initialize this way because Solidity won't let us copy arrays into storage yet.\\n        DripState storage state = drips[_name];\\n        state.status = DripStatus.PAUSED;\\n        state.config.interval = _config.interval;\\n        state.config.dripcheck = _config.dripcheck;\\n        state.config.checkparams = _config.checkparams;\\n\\n        // Solidity doesn't let us copy arrays into storage, so we push each array one by one.\\n        for (uint256 i = 0; i < _config.actions.length; i++) {\\n            state.config.actions.push(_config.actions[i]);\\n        }\\n\\n        // Tell the world!\\n        emit DripCreated(_name, _name, _config);\\n    }\\n\\n    /**\\n     * @notice Sets the status for a given drip. The behavior of this function depends on the\\n     *         status that the user is trying to set. A drip can always move between ACTIVE and\\n     *         PAUSED, but it can never move back to NONE and once ARCHIVED, it can never move back\\n     *         to ACTIVE or PAUSED.\\n     *\\n     * @param _name   Name of the drip to update.\\n     * @param _status New drip status.\\n     */\\n    function status(string memory _name, DripStatus _status) external onlyOwner {\\n        // Make sure we can never set drip status back to NONE. A simple security measure to\\n        // prevent accidental overwrites if this code is ever updated down the line.\\n        require(\\n            _status != DripStatus.NONE,\\n            \\\"Drippie: drip status can never be set back to NONE after creation\\\"\\n        );\\n\\n        // Make sure the drip in question actually exists. Not strictly necessary but there doesn't\\n        // seem to be any clear reason why you would want to do this, and it may save some gas in\\n        // the case of a front-end bug.\\n        require(\\n            drips[_name].status != DripStatus.NONE,\\n            \\\"Drippie: drip with that name does not exist\\\"\\n        );\\n\\n        // Once a drip has been archived, it cannot be un-archived. This is, after all, the entire\\n        // point of archiving a drip.\\n        require(\\n            drips[_name].status != DripStatus.ARCHIVED,\\n            \\\"Drippie: drip with that name has been archived\\\"\\n        );\\n\\n        // Although not strictly necessary, we make sure that the status here is actually changing.\\n        // This may save the client some gas if there's a front-end bug and the user accidentally\\n        // tries to \\\"change\\\" the status to the same value as before.\\n        require(\\n            drips[_name].status != _status,\\n            \\\"Drippie: cannot set drip status to same status as before\\\"\\n        );\\n\\n        // If the user is trying to archive this drip, make sure the drip has been paused. We do\\n        // not allow users to archive active drips so that the effects of this action are more\\n        // abundantly clear.\\n        if (_status == DripStatus.ARCHIVED) {\\n            require(\\n                drips[_name].status == DripStatus.PAUSED,\\n                \\\"Drippie: drip must be paused to be archived\\\"\\n            );\\n        }\\n\\n        // If we made it here then we can safely update the status.\\n        drips[_name].status = _status;\\n        emit DripStatusUpdated(_name, _name, drips[_name].status);\\n    }\\n\\n    /**\\n     * @notice Checks if a given drip is executable.\\n     *\\n     * @param _name Drip to check.\\n     *\\n     * @return True if the drip is executable, false otherwise.\\n     */\\n    function executable(string memory _name) public view returns (bool) {\\n        DripState storage state = drips[_name];\\n\\n        // Only allow active drips to be executed, an obvious security measure.\\n        require(\\n            state.status == DripStatus.ACTIVE,\\n            \\\"Drippie: selected drip does not exist or is not currently active\\\"\\n        );\\n\\n        // Don't drip if the drip interval has not yet elapsed since the last time we dripped. This\\n        // is a safety measure that prevents a malicious recipient from, e.g., spending all of\\n        // their funds and repeatedly requesting new drips. Limits the potential impact of a\\n        // compromised recipient to just a single drip interval, after which the drip can be paused\\n        // by the owner address.\\n        require(\\n            state.last + state.config.interval <= block.timestamp,\\n            \\\"Drippie: drip interval has not elapsed since last drip\\\"\\n        );\\n\\n        // Make sure we're allowed to execute this drip.\\n        require(\\n            state.config.dripcheck.check(state.config.checkparams),\\n            \\\"Drippie: dripcheck failed so drip is not yet ready to be triggered\\\"\\n        );\\n\\n        // Alright, we're good to execute.\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers a drip. This function is deliberately left as a public function because the\\n     *         assumption being made here is that setting the drip to ACTIVE is an affirmative\\n     *         signal that the drip should be executable according to the drip parameters, drip\\n     *         check, and drip interval. Note that drip parameters are read entirely from the state\\n     *         and are not supplied as user input, so there should not be any way for a\\n     *         non-authorized user to influence the behavior of the drip.\\n     *\\n     * @param _name Name of the drip to trigger.\\n     */\\n    function drip(string memory _name) external {\\n        DripState storage state = drips[_name];\\n\\n        // Make sure the drip can be executed.\\n        require(\\n            executable(_name) == true,\\n            \\\"Drippie: drip cannot be executed at this time, try again later\\\"\\n        );\\n\\n        // Update the last execution time for this drip before the call. Note that it's entirely\\n        // possible for a drip to be executed multiple times per block or even multiple times\\n        // within the same transaction (via re-entrancy) if the drip interval is set to zero. Users\\n        // should set a drip interval of 1 if they'd like the drip to be executed only once per\\n        // block (since this will then prevent re-entrancy).\\n        state.last = block.timestamp;\\n\\n        // Execute each action in the drip. We allow drips to have multiple actions because there\\n        // are scenarios in which a contract must do multiple things atomically. For example, the\\n        // contract may need to withdraw ETH from one account and then deposit that ETH into\\n        // another account within the same transaction.\\n        uint256 len = state.config.actions.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            // Must be marked as \\\"storage\\\" because copying structs into memory is not yet supported\\n            // by Solidity. Won't significantly reduce gas costs but at least makes it easier to\\n            // read what the rest of this section is doing.\\n            DripAction storage action = state.config.actions[i];\\n\\n            // Actually execute the action. We could use ExcessivelySafeCall here but not strictly\\n            // necessary (worst case, a drip gets bricked IFF the target is malicious, doubt this\\n            // will ever happen in practice). Could save a marginal amount of gas to ignore the\\n            // returndata.\\n            // slither-disable-next-line calls-loop\\n            (bool success, ) = action.target.call{ value: action.value }(action.data);\\n\\n            // Generally should not happen, but could if there's a misconfiguration (e.g., passing\\n            // the wrong data to the target contract), the recipient is not payable, or\\n            // insufficient gas was supplied to this transaction. We revert so the drip can be\\n            // fixed and triggered again later. Means we cannot emit an event to alert of the\\n            // failure, but can reasonably be detected by off-chain services even without an event.\\n            // Note that this forces the drip executor to supply sufficient gas to the call\\n            // (assuming there is some sufficient gas limit that exists, otherwise the drip will\\n            // not execute).\\n            require(\\n                success,\\n                \\\"Drippie: drip was unsuccessful, please check your configuration for mistakes\\\"\\n            );\\n        }\\n\\n        state.count++;\\n        emit DripExecuted(_name, _name, msg.sender, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x6696749e45d49c5724b4d04c59fa32bfae9b2bb687ba9e78fe4cf2a148198cfc\",\"license\":\"MIT\"},\"contracts/universal/drippie/IDripCheck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDripCheck {\\n    // DripCheck contracts that want to take parameters as inputs MUST expose a struct called\\n    // Params and an event _EventForExposingParamsStructInABI(Params params). This makes it\\n    // possible to easily encode parameters on the client side. Solidity does not support generics\\n    // so it's not possible to do this with explicit typing.\\n\\n    function check(bytes memory _params) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbf1b9be6bbcbbbd2268023a169382c9a62a58a343420e4bc4494a9f463f86042\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620026003803806200260083398101604081905262000034916200008c565b600080546001600160a01b0319166001600160a01b03831690811782556040518392839283929091907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350505050620000be565b6000602082840312156200009f57600080fd5b81516001600160a01b0381168114620000b757600080fd5b9392505050565b61253280620000ce6000396000f3fe6080604052600436106100e15760003560e01c8063690d83201161007f5780639456fbcc116100595780639456fbcc146102b05780639bc94d01146102d05780639e73dbea146102f0578063fc3e3eba1461030357600080fd5b8063690d83201461021e5780636f0488131461023e5780638da5cb5b1461025e57600080fd5b80634782f779116100bb5780634782f779146101845780634d7fba6e146101a45780635cef8b4a146101dd57806367148cd2146101fe57600080fd5b806313af4035146101225780634025feb21461014457806344004cc11461016457600080fd5b3661011d5760405134815233907f4103257eaac983ca79a70d28f90dfc4fa16b619bb0c17ee7cab0d4034c2796249060200160405180910390a2005b600080fd5b34801561012e57600080fd5b5061014261013d3660046119e8565b610333565b005b34801561015057600080fd5b5061014261015f366004611a0c565b61040f565b34801561017057600080fd5b5061014261017f366004611a0c565b610587565b34801561019057600080fd5b5061014261019f366004611a4d565b6106fe565b3480156101b057600080fd5b506101c46101bf366004611b95565b6107fa565b6040516101d49493929190611d60565b60405180910390f35b6101f06101eb366004611d93565b610a18565b6040516101d4929190611dec565b34801561020a57600080fd5b50610142610219366004611b95565b610af7565b34801561022a57600080fd5b506101426102393660046119e8565b610d6e565b34801561024a57600080fd5b50610142610259366004611e07565b610de2565b34801561026a57600080fd5b5060005461028b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d4565b3480156102bc57600080fd5b506101426102cb366004611fad565b6110b9565b3480156102dc57600080fd5b506101426102eb366004611fe6565b6111ba565b6101f06102fe366004612031565b61166c565b34801561030f57600080fd5b5061032361031e366004611b95565b61174f565b60405190151581526020016101d4565b60005473ffffffffffffffffffffffffffffffffffffffff16331461039f5760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104765760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152604482018390528416906323b872dd90606401600060405180830381600087803b1580156104ec57600080fd5b505af1158015610500573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f30b478a5e196e55886228aa87ba74a7dfeba655e0a4d7ba275eabfc22aabb7a88460405161057a91815260200190565b60405180910390a4505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ee5760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015610663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106879190612091565b508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6b00f1c7883f053ba83e907fd1965b22fffe3c4111383e725f04638a566cdbfa8460405161057a91815260200190565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107655760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f193505050501580156107a8573d6000803e3d6000fd5b5060405181815273ffffffffffffffffffffffffffffffffffffffff83169033907f1f12aa8b6d492dd9b98e2b00b0b20830c2a7ded65afac13b60d169a034ae90bc9060200160405180910390a35050565b805160208183018101805160018083529383019483019490942093905282546040805160808101825293850180548552600286015473ffffffffffffffffffffffffffffffffffffffff169385019390935260038501805460ff9093169594939291840191610868906120b3565b80601f0160208091040260200160405190810160405280929190818152602001828054610894906120b3565b80156108e15780601f106108b6576101008083540402835291602001916108e1565b820191906000526020600020905b8154815290600101906020018083116108c457829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610a00576000848152602090819020604080516060810190915260038502909101805473ffffffffffffffffffffffffffffffffffffffff1682526001810180549293919291840191610965906120b3565b80601f0160208091040260200160405190810160405280929190818152602001828054610991906120b3565b80156109de5780601f106109b3576101008083540402835291602001916109de565b820191906000526020600020905b8154815290600101906020018083116109c157829003601f168201915b505050505081526020016002820154815250508152602001906001019061090f565b50505091525050600582015460069092015490919084565b6000805460609073ffffffffffffffffffffffffffffffffffffffff163314610a835760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b8473ffffffffffffffffffffffffffffffffffffffff168385604051610aa99190612106565b6000604051808303818686f4925050503d8060008114610ae5576040519150601f19603f3d011682016040523d82523d6000602084013e610aea565b606091505b5091509150935093915050565b6000600182604051610b099190612106565b90815260200160405180910390209050610b228261174f565b1515600114610b995760405162461bcd60e51b815260206004820152603e60248201527f447269707069653a20647269702063616e6e6f7420626520657865637574656460448201527f20617420746869732074696d652c2074727920616761696e206c6174657200006064820152608401610396565b426005820155600481015460005b81811015610d00576000836001016003018281548110610bc957610bc9612122565b6000918252602082206003909102018054600282015460405192945073ffffffffffffffffffffffffffffffffffffffff90911691610c0c906001860190612151565b60006040518083038185875af1925050503d8060008114610c49576040519150601f19603f3d011682016040523d82523d6000602084013e610c4e565b606091505b5050905080610ceb5760405162461bcd60e51b815260206004820152604c60248201527f447269707069653a20647269702077617320756e7375636365737366756c2c2060448201527f706c6561736520636865636b20796f757220636f6e66696775726174696f6e2060648201527f666f72206d697374616b65730000000000000000000000000000000000000000608482015260a401610396565b50508080610cf890612214565b915050610ba7565b50600682018054906000610d1383612214565b919050555082604051610d269190612106565b60405180910390207fea21435419aad9c54a9d90e2522b6f60bd566401f36fcef661f5f5a28cc0d2c6843342604051610d619392919061224c565b60405180910390a2505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dd55760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b610ddf81476106fe565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e495760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b6000600183604051610e5b9190612106565b9081526040519081900360200190205460ff166003811115610e7f57610e7f611bd2565b14610ef25760405162461bcd60e51b815260206004820152602b60248201527f447269707069653a206472697020776974682074686174206e616d6520616c7260448201527f65616479206578697374730000000000000000000000000000000000000000006064820152608401610396565b6000600183604051610f049190612106565b908152604080516020928190038301902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600290811782558551600183015592850151928101805473ffffffffffffffffffffffffffffffffffffffff9094167fffffffffffffffffffffffff0000000000000000000000000000000000000000909416939093179092558301519091506003820190610fa890826122d6565b5060005b826060015151811015611071578160010160030183606001518281518110610fd657610fd6612122565b602090810291909101810151825460018082018555600094855293839020825160039092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117815591810151909282019061105190826122d6565b50604082015181600201555050808061106990612214565b915050610fac565b50826040516110809190612106565b60405180910390207f49c9c8da28762ffee6f3f2f37f8f4ebcd85afcb02e1bb496dc95cf47c96380368484604051610d619291906123d2565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111205760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526111b6908390839073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611192573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017f9190612400565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112215760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b600081600381111561123557611235611bd2565b036112ce5760405162461bcd60e51b815260206004820152604160248201527f447269707069653a2064726970207374617475732063616e206e65766572206260448201527f6520736574206261636b20746f204e4f4e45206166746572206372656174696f60648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a401610396565b60006001836040516112e09190612106565b9081526040519081900360200190205460ff16600381111561130457611304611bd2565b036113775760405162461bcd60e51b815260206004820152602b60248201527f447269707069653a206472697020776974682074686174206e616d6520646f6560448201527f73206e6f742065786973740000000000000000000000000000000000000000006064820152608401610396565b60036001836040516113899190612106565b9081526040519081900360200190205460ff1660038111156113ad576113ad611bd2565b036114205760405162461bcd60e51b815260206004820152602e60248201527f447269707069653a206472697020776974682074686174206e616d652068617360448201527f206265656e2061726368697665640000000000000000000000000000000000006064820152608401610396565b80600381111561143257611432611bd2565b6001836040516114429190612106565b9081526040519081900360200190205460ff16600381111561146657611466611bd2565b036114d95760405162461bcd60e51b815260206004820152603860248201527f447269707069653a2063616e6e6f74207365742064726970207374617475732060448201527f746f2073616d6520737461747573206173206265666f726500000000000000006064820152608401610396565b60038160038111156114ed576114ed611bd2565b0361159b5760026001836040516115049190612106565b9081526040519081900360200190205460ff16600381111561152857611528611bd2565b1461159b5760405162461bcd60e51b815260206004820152602b60248201527f447269707069653a2064726970206d7573742062652070617573656420746f2060448201527f62652061726368697665640000000000000000000000000000000000000000006064820152608401610396565b806001836040516115ac9190612106565b90815260405190819003602001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360038111156115f3576115f3611bd2565b0217905550816040516116069190612106565b60405180910390207f407cb3ad05e60ec498fb39417c7a4f6b82d5ba80f82fe512a37b02c93181a2a1836001856040516116409190612106565b90815260405190819003602001812054611660929160ff90911690612419565b60405180910390a25050565b6000805460609073ffffffffffffffffffffffffffffffffffffffff1633146116d75760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b8573ffffffffffffffffffffffffffffffffffffffff168484876040516116fe9190612106565b600060405180830381858888f193505050503d806000811461173c576040519150601f19603f3d011682016040523d82523d6000602084013e611741565b606091505b509150915094509492505050565b6000806001836040516117629190612106565b90815260405190819003602001902090506001815460ff16600381111561178b5761178b611bd2565b14611800576040805162461bcd60e51b81526020600482015260248101919091527f447269707069653a2073656c6563746564206472697020646f6573206e6f742060448201527f6578697374206f72206973206e6f742063757272656e746c79206163746976656064820152608401610396565b6001810154600582015442916118159161243b565b11156118895760405162461bcd60e51b815260206004820152603660248201527f447269707069653a206472697020696e74657276616c20686173206e6f74206560448201527f6c61707365642073696e6365206c6173742064726970000000000000000000006064820152608401610396565b60028101546040517fc64b3bb500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063c64b3bb5906118e4906003850190600401612453565b602060405180830381865afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119259190612091565b6119bd5760405162461bcd60e51b815260206004820152604260248201527f447269707069653a2064726970636865636b206661696c656420736f2064726960448201527f70206973206e6f742079657420726561647920746f206265207472696767657260648201527f6564000000000000000000000000000000000000000000000000000000000000608482015260a401610396565b50600192915050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ddf57600080fd5b6000602082840312156119fa57600080fd5b8135611a05816119c6565b9392505050565b600080600060608486031215611a2157600080fd5b8335611a2c816119c6565b92506020840135611a3c816119c6565b929592945050506040919091013590565b60008060408385031215611a6057600080fd5b8235611a6b816119c6565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611acb57611acb611a79565b60405290565b6040516060810167ffffffffffffffff81118282101715611acb57611acb611a79565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b1d57611b1d611a79565b604052919050565b600082601f830112611b3657600080fd5b813567ffffffffffffffff811115611b5057611b50611a79565b611b636020601f19601f84011601611af4565b818152846020838601011115611b7857600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ba757600080fd5b813567ffffffffffffffff811115611bbe57600080fd5b611bca84828501611b25565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611c38577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60005b83811015611c57578181015183820152602001611c3f565b83811115611c66576000848401525b50505050565b60008151808452611c84816020860160208601611c3c565b601f01601f19169290920160200192915050565b80518252600060208083015173ffffffffffffffffffffffffffffffffffffffff808216838701526040915081850151608083880152611cdb6080880182611c6c565b9050606080870151888303828a01528281518085528785019150878160051b860101888401935060005b82811015611d5057601f1987830301845284518881511683528a810151878c850152611d3388850182611c6c565b918b0151938b0193909352948a0194938a01939150600101611d05565b509b9a5050505050505050505050565b611d6a8186611c01565b608060208201526000611d806080830186611c98565b6040830194909452506060015292915050565b600080600060608486031215611da857600080fd5b8335611db3816119c6565b9250602084013567ffffffffffffffff811115611dcf57600080fd5b611ddb86828701611b25565b925050604084013590509250925092565b8215158152604060208201526000611bca6040830184611c6c565b60008060408385031215611e1a57600080fd5b823567ffffffffffffffff80821115611e3257600080fd5b611e3e86838701611b25565b9350602091508185013581811115611e5557600080fd5b850160808188031215611e6757600080fd5b611e6f611aa8565b8135815283820135611e80816119c6565b81850152604082013583811115611e9657600080fd5b611ea289828501611b25565b604083015250606082013583811115611eba57600080fd5b80830192505087601f830112611ecf57600080fd5b813583811115611ee157611ee1611a79565b8060051b611ef0868201611af4565b918252838101860191868101908b841115611f0a57600080fd5b87860192505b83831015611f9757823587811115611f285760008081fd5b86016060818e03601f19011215611f3f5760008081fd5b611f47611ad1565b89820135611f54816119c6565b8152604082013589811115611f695760008081fd5b611f778f8c83860101611b25565b828c01525060609190910135604082015282529187019190870190611f10565b6060850152509699919850909650505050505050565b60008060408385031215611fc057600080fd5b8235611fcb816119c6565b91506020830135611fdb816119c6565b809150509250929050565b60008060408385031215611ff957600080fd5b823567ffffffffffffffff81111561201057600080fd5b61201c85828601611b25565b925050602083013560048110611fdb57600080fd5b6000806000806080858703121561204757600080fd5b8435612052816119c6565b9350602085013567ffffffffffffffff81111561206e57600080fd5b61207a87828801611b25565b949794965050505060408301359260600135919050565b6000602082840312156120a357600080fd5b81518015158114611a0557600080fd5b600181811c908216806120c757607f821691505b602082108103612100577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008251612118818460208701611c3c565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080835461215f816120b3565b6001828116801561217757600181146121aa576121d9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506121d9565b8760005260208060002060005b858110156121d05781548a8201529084019082016121b7565b50505082870194505b50929695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612245576122456121e5565b5060010190565b60608152600061225f6060830186611c6c565b73ffffffffffffffffffffffffffffffffffffffff9490941660208301525060400152919050565b601f8211156122d157600081815260208120601f850160051c810160208610156122ae5750805b601f850160051c820191505b818110156122cd578281556001016122ba565b5050505b505050565b815167ffffffffffffffff8111156122f0576122f0611a79565b612304816122fe84546120b3565b84612287565b602080601f83116001811461235757600084156123215750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556122cd565b600085815260208120601f198616915b8281101561238657888601518255948401946001909101908401612367565b50858210156123c257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006123e56040830185611c6c565b82810360208401526123f78185611c98565b95945050505050565b60006020828403121561241257600080fd5b5051919050565b60408152600061242c6040830185611c6c565b9050611a056020830184611c01565b6000821982111561244e5761244e6121e5565b500190565b6000602080835260008454612467816120b3565b8084870152604060018084166000811461248857600181146124c0576124ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838a01528284151560051b8a010195506124ee565b896000528660002060005b858110156124e65781548b82018601529083019088016124cb565b8a0184019650505b50939897505050505050505056fea26469706673582212209e2c642d826f29e188c7d7b6e9595445cf633c5a5dd84422c15db472d859adff64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c8063690d83201161007f5780639456fbcc116100595780639456fbcc146102b05780639bc94d01146102d05780639e73dbea146102f0578063fc3e3eba1461030357600080fd5b8063690d83201461021e5780636f0488131461023e5780638da5cb5b1461025e57600080fd5b80634782f779116100bb5780634782f779146101845780634d7fba6e146101a45780635cef8b4a146101dd57806367148cd2146101fe57600080fd5b806313af4035146101225780634025feb21461014457806344004cc11461016457600080fd5b3661011d5760405134815233907f4103257eaac983ca79a70d28f90dfc4fa16b619bb0c17ee7cab0d4034c2796249060200160405180910390a2005b600080fd5b34801561012e57600080fd5b5061014261013d3660046119e8565b610333565b005b34801561015057600080fd5b5061014261015f366004611a0c565b61040f565b34801561017057600080fd5b5061014261017f366004611a0c565b610587565b34801561019057600080fd5b5061014261019f366004611a4d565b6106fe565b3480156101b057600080fd5b506101c46101bf366004611b95565b6107fa565b6040516101d49493929190611d60565b60405180910390f35b6101f06101eb366004611d93565b610a18565b6040516101d4929190611dec565b34801561020a57600080fd5b50610142610219366004611b95565b610af7565b34801561022a57600080fd5b506101426102393660046119e8565b610d6e565b34801561024a57600080fd5b50610142610259366004611e07565b610de2565b34801561026a57600080fd5b5060005461028b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d4565b3480156102bc57600080fd5b506101426102cb366004611fad565b6110b9565b3480156102dc57600080fd5b506101426102eb366004611fe6565b6111ba565b6101f06102fe366004612031565b61166c565b34801561030f57600080fd5b5061032361031e366004611b95565b61174f565b60405190151581526020016101d4565b60005473ffffffffffffffffffffffffffffffffffffffff16331461039f5760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104765760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152604482018390528416906323b872dd90606401600060405180830381600087803b1580156104ec57600080fd5b505af1158015610500573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f30b478a5e196e55886228aa87ba74a7dfeba655e0a4d7ba275eabfc22aabb7a88460405161057a91815260200190565b60405180910390a4505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ee5760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015610663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106879190612091565b508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6b00f1c7883f053ba83e907fd1965b22fffe3c4111383e725f04638a566cdbfa8460405161057a91815260200190565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107655760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f193505050501580156107a8573d6000803e3d6000fd5b5060405181815273ffffffffffffffffffffffffffffffffffffffff83169033907f1f12aa8b6d492dd9b98e2b00b0b20830c2a7ded65afac13b60d169a034ae90bc9060200160405180910390a35050565b805160208183018101805160018083529383019483019490942093905282546040805160808101825293850180548552600286015473ffffffffffffffffffffffffffffffffffffffff169385019390935260038501805460ff9093169594939291840191610868906120b3565b80601f0160208091040260200160405190810160405280929190818152602001828054610894906120b3565b80156108e15780601f106108b6576101008083540402835291602001916108e1565b820191906000526020600020905b8154815290600101906020018083116108c457829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610a00576000848152602090819020604080516060810190915260038502909101805473ffffffffffffffffffffffffffffffffffffffff1682526001810180549293919291840191610965906120b3565b80601f0160208091040260200160405190810160405280929190818152602001828054610991906120b3565b80156109de5780601f106109b3576101008083540402835291602001916109de565b820191906000526020600020905b8154815290600101906020018083116109c157829003601f168201915b505050505081526020016002820154815250508152602001906001019061090f565b50505091525050600582015460069092015490919084565b6000805460609073ffffffffffffffffffffffffffffffffffffffff163314610a835760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b8473ffffffffffffffffffffffffffffffffffffffff168385604051610aa99190612106565b6000604051808303818686f4925050503d8060008114610ae5576040519150601f19603f3d011682016040523d82523d6000602084013e610aea565b606091505b5091509150935093915050565b6000600182604051610b099190612106565b90815260200160405180910390209050610b228261174f565b1515600114610b995760405162461bcd60e51b815260206004820152603e60248201527f447269707069653a20647269702063616e6e6f7420626520657865637574656460448201527f20617420746869732074696d652c2074727920616761696e206c6174657200006064820152608401610396565b426005820155600481015460005b81811015610d00576000836001016003018281548110610bc957610bc9612122565b6000918252602082206003909102018054600282015460405192945073ffffffffffffffffffffffffffffffffffffffff90911691610c0c906001860190612151565b60006040518083038185875af1925050503d8060008114610c49576040519150601f19603f3d011682016040523d82523d6000602084013e610c4e565b606091505b5050905080610ceb5760405162461bcd60e51b815260206004820152604c60248201527f447269707069653a20647269702077617320756e7375636365737366756c2c2060448201527f706c6561736520636865636b20796f757220636f6e66696775726174696f6e2060648201527f666f72206d697374616b65730000000000000000000000000000000000000000608482015260a401610396565b50508080610cf890612214565b915050610ba7565b50600682018054906000610d1383612214565b919050555082604051610d269190612106565b60405180910390207fea21435419aad9c54a9d90e2522b6f60bd566401f36fcef661f5f5a28cc0d2c6843342604051610d619392919061224c565b60405180910390a2505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dd55760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b610ddf81476106fe565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e495760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b6000600183604051610e5b9190612106565b9081526040519081900360200190205460ff166003811115610e7f57610e7f611bd2565b14610ef25760405162461bcd60e51b815260206004820152602b60248201527f447269707069653a206472697020776974682074686174206e616d6520616c7260448201527f65616479206578697374730000000000000000000000000000000000000000006064820152608401610396565b6000600183604051610f049190612106565b908152604080516020928190038301902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600290811782558551600183015592850151928101805473ffffffffffffffffffffffffffffffffffffffff9094167fffffffffffffffffffffffff0000000000000000000000000000000000000000909416939093179092558301519091506003820190610fa890826122d6565b5060005b826060015151811015611071578160010160030183606001518281518110610fd657610fd6612122565b602090810291909101810151825460018082018555600094855293839020825160039092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117815591810151909282019061105190826122d6565b50604082015181600201555050808061106990612214565b915050610fac565b50826040516110809190612106565b60405180910390207f49c9c8da28762ffee6f3f2f37f8f4ebcd85afcb02e1bb496dc95cf47c96380368484604051610d619291906123d2565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111205760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526111b6908390839073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611192573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017f9190612400565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112215760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b600081600381111561123557611235611bd2565b036112ce5760405162461bcd60e51b815260206004820152604160248201527f447269707069653a2064726970207374617475732063616e206e65766572206260448201527f6520736574206261636b20746f204e4f4e45206166746572206372656174696f60648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a401610396565b60006001836040516112e09190612106565b9081526040519081900360200190205460ff16600381111561130457611304611bd2565b036113775760405162461bcd60e51b815260206004820152602b60248201527f447269707069653a206472697020776974682074686174206e616d6520646f6560448201527f73206e6f742065786973740000000000000000000000000000000000000000006064820152608401610396565b60036001836040516113899190612106565b9081526040519081900360200190205460ff1660038111156113ad576113ad611bd2565b036114205760405162461bcd60e51b815260206004820152602e60248201527f447269707069653a206472697020776974682074686174206e616d652068617360448201527f206265656e2061726368697665640000000000000000000000000000000000006064820152608401610396565b80600381111561143257611432611bd2565b6001836040516114429190612106565b9081526040519081900360200190205460ff16600381111561146657611466611bd2565b036114d95760405162461bcd60e51b815260206004820152603860248201527f447269707069653a2063616e6e6f74207365742064726970207374617475732060448201527f746f2073616d6520737461747573206173206265666f726500000000000000006064820152608401610396565b60038160038111156114ed576114ed611bd2565b0361159b5760026001836040516115049190612106565b9081526040519081900360200190205460ff16600381111561152857611528611bd2565b1461159b5760405162461bcd60e51b815260206004820152602b60248201527f447269707069653a2064726970206d7573742062652070617573656420746f2060448201527f62652061726368697665640000000000000000000000000000000000000000006064820152608401610396565b806001836040516115ac9190612106565b90815260405190819003602001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360038111156115f3576115f3611bd2565b0217905550816040516116069190612106565b60405180910390207f407cb3ad05e60ec498fb39417c7a4f6b82d5ba80f82fe512a37b02c93181a2a1836001856040516116409190612106565b90815260405190819003602001812054611660929160ff90911690612419565b60405180910390a25050565b6000805460609073ffffffffffffffffffffffffffffffffffffffff1633146116d75760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610396565b8573ffffffffffffffffffffffffffffffffffffffff168484876040516116fe9190612106565b600060405180830381858888f193505050503d806000811461173c576040519150601f19603f3d011682016040523d82523d6000602084013e611741565b606091505b509150915094509492505050565b6000806001836040516117629190612106565b90815260405190819003602001902090506001815460ff16600381111561178b5761178b611bd2565b14611800576040805162461bcd60e51b81526020600482015260248101919091527f447269707069653a2073656c6563746564206472697020646f6573206e6f742060448201527f6578697374206f72206973206e6f742063757272656e746c79206163746976656064820152608401610396565b6001810154600582015442916118159161243b565b11156118895760405162461bcd60e51b815260206004820152603660248201527f447269707069653a206472697020696e74657276616c20686173206e6f74206560448201527f6c61707365642073696e6365206c6173742064726970000000000000000000006064820152608401610396565b60028101546040517fc64b3bb500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063c64b3bb5906118e4906003850190600401612453565b602060405180830381865afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119259190612091565b6119bd5760405162461bcd60e51b815260206004820152604260248201527f447269707069653a2064726970636865636b206661696c656420736f2064726960448201527f70206973206e6f742079657420726561647920746f206265207472696767657260648201527f6564000000000000000000000000000000000000000000000000000000000000608482015260a401610396565b50600192915050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ddf57600080fd5b6000602082840312156119fa57600080fd5b8135611a05816119c6565b9392505050565b600080600060608486031215611a2157600080fd5b8335611a2c816119c6565b92506020840135611a3c816119c6565b929592945050506040919091013590565b60008060408385031215611a6057600080fd5b8235611a6b816119c6565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611acb57611acb611a79565b60405290565b6040516060810167ffffffffffffffff81118282101715611acb57611acb611a79565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b1d57611b1d611a79565b604052919050565b600082601f830112611b3657600080fd5b813567ffffffffffffffff811115611b5057611b50611a79565b611b636020601f19601f84011601611af4565b818152846020838601011115611b7857600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ba757600080fd5b813567ffffffffffffffff811115611bbe57600080fd5b611bca84828501611b25565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611c38577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60005b83811015611c57578181015183820152602001611c3f565b83811115611c66576000848401525b50505050565b60008151808452611c84816020860160208601611c3c565b601f01601f19169290920160200192915050565b80518252600060208083015173ffffffffffffffffffffffffffffffffffffffff808216838701526040915081850151608083880152611cdb6080880182611c6c565b9050606080870151888303828a01528281518085528785019150878160051b860101888401935060005b82811015611d5057601f1987830301845284518881511683528a810151878c850152611d3388850182611c6c565b918b0151938b0193909352948a0194938a01939150600101611d05565b509b9a5050505050505050505050565b611d6a8186611c01565b608060208201526000611d806080830186611c98565b6040830194909452506060015292915050565b600080600060608486031215611da857600080fd5b8335611db3816119c6565b9250602084013567ffffffffffffffff811115611dcf57600080fd5b611ddb86828701611b25565b925050604084013590509250925092565b8215158152604060208201526000611bca6040830184611c6c565b60008060408385031215611e1a57600080fd5b823567ffffffffffffffff80821115611e3257600080fd5b611e3e86838701611b25565b9350602091508185013581811115611e5557600080fd5b850160808188031215611e6757600080fd5b611e6f611aa8565b8135815283820135611e80816119c6565b81850152604082013583811115611e9657600080fd5b611ea289828501611b25565b604083015250606082013583811115611eba57600080fd5b80830192505087601f830112611ecf57600080fd5b813583811115611ee157611ee1611a79565b8060051b611ef0868201611af4565b918252838101860191868101908b841115611f0a57600080fd5b87860192505b83831015611f9757823587811115611f285760008081fd5b86016060818e03601f19011215611f3f5760008081fd5b611f47611ad1565b89820135611f54816119c6565b8152604082013589811115611f695760008081fd5b611f778f8c83860101611b25565b828c01525060609190910135604082015282529187019190870190611f10565b6060850152509699919850909650505050505050565b60008060408385031215611fc057600080fd5b8235611fcb816119c6565b91506020830135611fdb816119c6565b809150509250929050565b60008060408385031215611ff957600080fd5b823567ffffffffffffffff81111561201057600080fd5b61201c85828601611b25565b925050602083013560048110611fdb57600080fd5b6000806000806080858703121561204757600080fd5b8435612052816119c6565b9350602085013567ffffffffffffffff81111561206e57600080fd5b61207a87828801611b25565b949794965050505060408301359260600135919050565b6000602082840312156120a357600080fd5b81518015158114611a0557600080fd5b600181811c908216806120c757607f821691505b602082108103612100577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008251612118818460208701611c3c565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080835461215f816120b3565b6001828116801561217757600181146121aa576121d9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506121d9565b8760005260208060002060005b858110156121d05781548a8201529084019082016121b7565b50505082870194505b50929695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612245576122456121e5565b5060010190565b60608152600061225f6060830186611c6c565b73ffffffffffffffffffffffffffffffffffffffff9490941660208301525060400152919050565b601f8211156122d157600081815260208120601f850160051c810160208610156122ae5750805b601f850160051c820191505b818110156122cd578281556001016122ba565b5050505b505050565b815167ffffffffffffffff8111156122f0576122f0611a79565b612304816122fe84546120b3565b84612287565b602080601f83116001811461235757600084156123215750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556122cd565b600085815260208120601f198616915b8281101561238657888601518255948401946001909101908401612367565b50858210156123c257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006123e56040830185611c6c565b82810360208401526123f78185611c98565b95945050505050565b60006020828403121561241257600080fd5b5051919050565b60408152600061242c6040830185611c6c565b9050611a056020830184611c01565b6000821982111561244e5761244e6121e5565b500190565b6000602080835260008454612467816120b3565b8084870152604060018084166000811461248857600181146124c0576124ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838a01528284151560051b8a010195506124ee565b896000528660002060005b858110156124e65781548b82018601529083019088016124cb565b8a0184019650505b50939897505050505050505056fea26469706673582212209e2c642d826f29e188c7d7b6e9595445cf633c5a5dd84422c15db472d859adff64736f6c634300080f0033",
  "devdoc": {
    "events": {
      "DripCreated(string,string,(uint256,address,bytes,(address,bytes,uint256)[]))": {
        "params": {
          "config": "Config for the created drip.",
          "name": "Unindexed name parameter (unhashed).",
          "nameref": "Indexed name parameter (hashed)."
        }
      },
      "DripExecuted(string,string,address,uint256)": {
        "params": {
          "executor": "Address that executed the drip.",
          "name": "Unindexed name parameter (unhashed).",
          "nameref": "Indexed name parameter (hashed).",
          "timestamp": "Time when the drip was executed."
        }
      },
      "DripStatusUpdated(string,string,uint8)": {
        "params": {
          "name": "Unindexed name parameter (unhashed).",
          "nameref": "Indexed name parameter (hashed).",
          "status": "New drip status."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "CALL(address,bytes,uint256,uint256)": {
        "params": {
          "_data": "Data to send with the call.",
          "_gas": "Amount of gas to send with the call.",
          "_target": "Address to call.",
          "_value": "ETH value to send with the call."
        },
        "returns": {
          "_0": "Boolean success value.",
          "_1": "Bytes data returned by the call."
        }
      },
      "DELEGATECALL(address,bytes,uint256)": {
        "params": {
          "_data": "Data to send with the call.",
          "_gas": "Amount of gas to send with the call.",
          "_target": "Address to call."
        },
        "returns": {
          "_0": "Boolean success value.",
          "_1": "Bytes data returned by the call."
        }
      },
      "constructor": {
        "params": {
          "_owner": "Initial contract owner."
        }
      },
      "create(string,(uint256,address,bytes,(address,bytes,uint256)[]))": {
        "params": {
          "_config": "Configuration for the drip.",
          "_name": "Name of the drip."
        }
      },
      "drip(string)": {
        "params": {
          "_name": "Name of the drip to trigger."
        }
      },
      "executable(string)": {
        "params": {
          "_name": "Drip to check."
        },
        "returns": {
          "_0": "True if the drip is executable, false otherwise."
        }
      },
      "status(string,uint8)": {
        "params": {
          "_name": "Name of the drip to update.",
          "_status": "New drip status."
        }
      },
      "withdrawERC20(address,address)": {
        "params": {
          "_asset": "ERC20 token to withdraw.",
          "_to": "Address to receive the ERC20 balance."
        }
      },
      "withdrawERC20(address,address,uint256)": {
        "params": {
          "_amount": "Amount of ERC20 to withdraw.",
          "_asset": "ERC20 token to withdraw.",
          "_to": "Address to receive the ERC20 balance."
        }
      },
      "withdrawERC721(address,address,uint256)": {
        "params": {
          "_asset": "ERC721 token to withdraw.",
          "_id": "Token ID of the ERC721 token to withdraw.",
          "_to": "Address to receive the ERC721 token."
        }
      },
      "withdrawETH(address)": {
        "params": {
          "_to": "Address to receive the ETH balance."
        }
      },
      "withdrawETH(address,uint256)": {
        "params": {
          "_amount": "Amount of ETH to withdraw.",
          "_to": "Address to receive the ETH balance."
        }
      }
    },
    "title": "Drippie",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DripCreated(string,string,(uint256,address,bytes,(address,bytes,uint256)[]))": {
        "notice": "Emitted when a new drip is created."
      },
      "DripExecuted(string,string,address,uint256)": {
        "notice": "Emitted when a drip is executed."
      },
      "DripStatusUpdated(string,string,uint8)": {
        "notice": "Emitted when a drip status is updated."
      },
      "ReceivedETH(address,uint256)": {
        "notice": "Emitted when ETH is received by this address."
      },
      "WithdrewERC20(address,address,address,uint256)": {
        "notice": "Emitted when ERC20 tokens are withdrawn from this address."
      },
      "WithdrewERC721(address,address,address,uint256)": {
        "notice": "Emitted when ERC20 tokens are withdrawn from this address."
      },
      "WithdrewETH(address,address,uint256)": {
        "notice": "Emitted when ETH is withdrawn from this address."
      }
    },
    "kind": "user",
    "methods": {
      "CALL(address,bytes,uint256,uint256)": {
        "notice": "Sends a CALL to a target address."
      },
      "DELEGATECALL(address,bytes,uint256)": {
        "notice": "Sends a DELEGATECALL to a target address."
      },
      "create(string,(uint256,address,bytes,(address,bytes,uint256)[]))": {
        "notice": "Creates a new drip with the given name and configuration. Once created, drips cannot         be modified in any way (this is a security measure). If you want to update a drip,         simply pause (and potentially archive) the existing drip and create a new one."
      },
      "drip(string)": {
        "notice": "Triggers a drip. This function is deliberately left as a public function because the         assumption being made here is that setting the drip to ACTIVE is an affirmative         signal that the drip should be executable according to the drip parameters, drip         check, and drip interval. Note that drip parameters are read entirely from the state         and are not supplied as user input, so there should not be any way for a         non-authorized user to influence the behavior of the drip."
      },
      "drips(string)": {
        "notice": "Maps from drip names to drip states."
      },
      "executable(string)": {
        "notice": "Checks if a given drip is executable."
      },
      "status(string,uint8)": {
        "notice": "Sets the status for a given drip. The behavior of this function depends on the         status that the user is trying to set. A drip can always move between ACTIVE and         PAUSED, but it can never move back to NONE and once ARCHIVED, it can never move back         to ACTIVE or PAUSED."
      },
      "withdrawERC20(address,address)": {
        "notice": "Withdraws full ERC20 balance to the recipient."
      },
      "withdrawERC20(address,address,uint256)": {
        "notice": "Withdraws partial ERC20 balance to the recipient."
      },
      "withdrawERC721(address,address,uint256)": {
        "notice": "Withdraws ERC721 token to the recipient."
      },
      "withdrawETH(address)": {
        "notice": "Withdraws full ETH balance to the recipient."
      },
      "withdrawETH(address,uint256)": {
        "notice": "Withdraws partial ETH balance to the recipient."
      }
    },
    "notice": "Drippie is a system for managing automated contract interactions. A specific interaction         is called a \"drip\" and can be executed according to some condition (called a dripcheck)         and an execution interval. Drips cannot be executed faster than the execution interval.         Drips can trigger arbitrary contract calls where the calling contract is this contract         address. Drips can also send ETH value, which makes them ideal for keeping addresses         sufficiently funded with ETH. Drippie is designed to be connected with smart contract         automation services so that drips can be executed automatically. However, Drippie is         specifically designed to be separated from these services so that trust assumptions are         better compartmentalized.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4096,
        "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6733,
        "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
        "label": "drips",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_struct(DripState)6696_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(DripAction)6673_storage)dyn_storage": {
        "base": "t_struct(DripAction)6673_storage",
        "encoding": "dynamic_array",
        "label": "struct Drippie.DripAction[]",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IDripCheck)7077": {
        "encoding": "inplace",
        "label": "contract IDripCheck",
        "numberOfBytes": "20"
      },
      "t_enum(DripStatus)6666": {
        "encoding": "inplace",
        "label": "enum Drippie.DripStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_struct(DripState)6696_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Drippie.DripState)",
        "numberOfBytes": "32",
        "value": "t_struct(DripState)6696_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DripAction)6673_storage": {
        "encoding": "inplace",
        "label": "struct Drippie.DripAction",
        "members": [
          {
            "astId": 6668,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "target",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 6670,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 6672,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "value",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DripConfig)6685_storage": {
        "encoding": "inplace",
        "label": "struct Drippie.DripConfig",
        "members": [
          {
            "astId": 6675,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "interval",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6678,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "dripcheck",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IDripCheck)7077"
          },
          {
            "astId": 6680,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "checkparams",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 6684,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "actions",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(DripAction)6673_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DripState)6696_storage": {
        "encoding": "inplace",
        "label": "struct Drippie.DripState",
        "members": [
          {
            "astId": 6688,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(DripStatus)6666"
          },
          {
            "astId": 6691,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "config",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(DripConfig)6685_storage"
          },
          {
            "astId": 6693,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "last",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6695,
            "contract": "contracts/universal/drippie/Drippie.sol:Drippie",
            "label": "count",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}