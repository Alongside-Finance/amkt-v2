pragma solidity =0.8.18;

import {UpgradePreparationTest} from "test/upgrade/helpers/UpgradePreparation.t.sol";
import {console} from "forge-std/console.sol";

contract UpgradedTest is UpgradePreparationTest {
    bytes inputBatchExecutionData =
        hex"";
    bool triggerMigrationWarning_executeUpgradeBundle;
    string forkOverrideUrl = vm.envString("MAINNET_RPC");
    uint256 batchExecutionBlock;

    function setUp() public override {
        if (keccak256(abi.encodePacked(forkOverrideUrl)) == keccak256(abi.encodePacked("none"))) {
            super.setUp();
            executeUpgradeBundle();
        } else {
            vm.createSelectFork(forkOverrideUrl, 18470753);
            console.log(forkOverrideUrl);
            batchExecutionBlock = 18470753; // REPLACE WITH ACTUAL BLOCK
            super.setDeployedContracts();
        }
    }

    // WARN:
    // As a final check, the tests should be run with the actual calldata that signers will be using,
    // This serves as a redundant check that the calldata being signed is correct.
    function executeUpgradeBundle() public {
        batchExecutionBlock = block.number;
        triggerMigrationWarning_executeUpgradeBundle = false; // Flip when inputBatchExecution is used
        executeBatchData(batchExecutionData); // use inputBatchExecutionData instead, when it is ready
    }
}
